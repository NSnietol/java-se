/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package componentewebcam;

import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamDiscoveryEvent;
import com.github.sarxos.webcam.WebcamDiscoveryListener;
import com.github.sarxos.webcam.WebcamEvent;
import com.github.sarxos.webcam.WebcamListener;
import com.github.sarxos.webcam.WebcamPanel;
import com.github.sarxos.webcam.WebcamPicker;
import com.github.sarxos.webcam.WebcamResolution;
import java.awt.BorderLayout;
import java.awt.Button;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.image.BufferedImage;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author NS
 */
public final class vistaWebCam extends javax.swing.JFrame implements ActionListener,ItemListener,WindowListener, Runnable, WebcamListener, WebcamDiscoveryListener {

    /**
     * Creates new form vistaWebCam
     */
    private static final long serialVersionUID = 1L;

    private Webcam webcam = null;

    private WebcamPanel panel = null;

    private WebcamPicker picker = null;
    
    private final Button botonFotografia = new Button("Capturar Fotografía");
    
   

    public vistaWebCam() {
      
        initComponents();
        this.setLocationRelativeTo(null);
       
 
    }
     @Override
    public void run() {
 
        Webcam.addDiscoveryListener(this);
 
       // setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());
 
        addWindowListener(this);
 
        picker = new WebcamPicker();
        picker.addItemListener(this);
 
        if(Webcam.getWebcams().get(1)!=null){
            webcam = Webcam.getWebcams().get(1);
            
        }
        else {
            webcam = picker.getSelectedWebcam();
        }
 
        if (webcam == null) {
            System.out.println("No pudimos encontrar la WebCam...");
            System.exit(1);
        }
 
        webcam.setViewSize(WebcamResolution.VGA.getSize());
        webcam.addWebcamListener(vistaWebCam.this);
 
        panel = new WebcamPanel(webcam, false);
        panel.setFPSDisplayed(true);
 
        add(picker, BorderLayout.NORTH); // Permite realizar la elección de la web Cam
        add(panel, BorderLayout.CENTER); // Es el encargado de visualizar y manejar la camara
        
         add(botonFotografia, BorderLayout.SOUTH);
          botonFotografia.addActionListener(this);
        
        pack();
        setVisible(true);
 
        Thread t = new Thread() {
 
            @Override
            public void run() {
                panel.start();
            }
        };
        t.setName("starter");
        t.setDaemon(true);
       // t.setUncaughtExceptionHandler(this);
        t.start();
    }
 
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addWindowStateListener(new java.awt.event.WindowStateListener() {
            public void windowStateChanged(java.awt.event.WindowEvent evt) {
                formWindowStateChanged(evt);
            }
        });

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowStateChanged(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowStateChanged

    @Override
    public void actionPerformed(ActionEvent e) {
         
        if(e.getSource()== botonFotografia){
            // get image
            BufferedImage image = webcam.getImage();
            if(image==null) {
                JOptionPane.showMessageDialog(null, "No sé pudo capturar la fotografía", "Error", JOptionPane.ERROR_MESSAGE);
          
                System.out.println("Error al capturar la foto");
            }else {
             JOptionPane.showMessageDialog(null, "Fotografía capturada", "", JOptionPane.INFORMATION_MESSAGE);               
             System.out.println("Listo");   
                this.setVisible(false);
            
            }
             
        }
         
    }
    
        public BufferedImage fotografia(){
        return webcam.getImage();
    
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(vistaWebCam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                 SwingUtilities.invokeLater(new vistaWebCam());
                
               // new vistaWebCam().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public void webcamOpen(WebcamEvent we) {
        System.out.println("Iniciando..");
// throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void webcamClosed(WebcamEvent we) {
        System.out.println("WebCam cerrada");

    }

    @Override
    public void webcamDisposed(WebcamEvent we) {
           System.out.println("webcam disponible");
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void webcamImageObtained(WebcamEvent we) {
       // No sé que hace este
    }

    @Override
    public void webcamFound(WebcamDiscoveryEvent wde) {
             if (picker != null) {
            picker.addItem(wde.getWebcam());
        }


    }

    @Override
    public void webcamGone(WebcamDiscoveryEvent wde) {
         if (picker != null) {
            picker.removeItem(wde.getWebcam());
        }
    }

  

    @Override
    public void windowOpened(WindowEvent e) {
        
        System.out.println("Iniciando Camara");
      
    }

    @Override
    public void windowClosing(WindowEvent e) {
        setVisible(false); // Para que no se pierda el Buffer

    }

    @Override
    public void windowClosed(WindowEvent e) {
     //   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowIconified(WindowEvent e) {
   //     throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowDeiconified(WindowEvent e) {
    //    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowActivated(WindowEvent e) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowDeactivated(WindowEvent e) {
       // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    
    
   

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getItem() != webcam) {
            if (webcam != null) {
 
                panel.stop();
 
                remove(panel);
 
                webcam.removeWebcamListener(this);
                webcam.close();
 
                webcam = (Webcam) e.getItem();
                webcam.setViewSize(WebcamResolution.VGA.getSize());
                webcam.addWebcamListener(this);
 
                System.out.println("selected " + webcam.getName());
 
                panel = new WebcamPanel(webcam, false);
                panel.setFPSDisplayed(true);
 
                add(panel, BorderLayout.CENTER);
                pack();
 
                Thread t = new Thread() {
 
                    @Override
                    public void run() {
                        panel.start();
                    }
                };
                t.setName("stoper");
                t.setDaemon(true);
             //   t.setUncaughtExceptionHandler(this);
                t.start();
            }
        }
    }
 
}
